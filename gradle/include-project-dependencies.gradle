/*
 * Copyright 2020-2022 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

new ProjectConfigurer(settings).doIt()

class ProjectConfigurer {
	Map<String, File> projectMap = [:]
	File rootDir
	Settings settings

	ProjectConfigurer(Settings settings) {
		this.rootDir = settings.getRootDir()
		this.settings = settings
	}
	
	
	void doIt() {
		long startTime = System.currentTimeMillis()
		println "Included projects:"
		
		// Step 1.
		this.discoverProjects(this.rootDir.getParentFile())
		
		// Step 2.
		Set<String> deps = this.getDependendentProjects(this.rootDir, 0)
		
		// Step 3.
		this.includeDependentProjects(deps)		
		
		println String.format("Dependency check took %d ms", System.currentTimeMillis() - startTime)
	}


	/**
	 * Recursively searches folders starting with '../' containing a build.gradle file.
	 * @return
	 */
	private void discoverProjects(File root) {
		root.eachDir(){ dir ->
			if (this.isDirRelevant(dir)) {
				if (new File(dir, 'build.gradle').exists() && !dir.name.equals("spvitamin")) {
					this.projectMap.put(dir.name, dir)
				}
				else {
					this.discoverProjects(dir)
				}
			}
		}
	}


	private boolean isDirRelevant(File dir) {
		return !(dir.name.equals("admin-gui") || dir.name.equals(".git") || dir.name.equals(".gradle") || dir.name.equals("build") || dir.name.equals("out"))
	}
	

	private Set<String> getDependendentProjects(File root, int level) {
		Set<String> deps = [] as Set
		File buildGradleFile = new File(root, "build.gradle")
		if (buildGradleFile.exists()) {
			buildGradleFile.eachLine {line ->
				if (!(line =~ /^\s*\/\//) && (line =~ /^\s*compile\s*project/) || line =~ /^\s*api\s*project/ || line =~ /^\s*runtime\s*project/) {
					def matcher = line =~ /:[a-z-A-Z0-9]*/
					if (matcher.size() == 1) {
						def projName = matcher[0].substring(1)
						deps += projName
						//println String.join("", Collections.nCopies(level, "    ")) + ":${projName}"
						if (this.projectMap[projName] == null) {
							println 'Project does not exist: ' + projName
						}
						deps += this.getDependendentProjects(this.projectMap[projName], level + 1)
					}
				}
			}
		}
		return deps
	}


	private void includeDependentProjects(Set<String> deps) {
		deps.each { projName ->
			settings.include "${projName}"
			def projDir = new File("${projectMap[projName]}")
			settings.project(":${projName}").projectDir = projDir
			println "  :${projName} => ${projDir}"
		}
	}
}
