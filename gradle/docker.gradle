/*
 * Copyright 2020-2022 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/********************************************************************************************************
 * Build a docker image based on the installation
 *******************************************************************************************************/
if (project.hasProperty('application')) {

	ext {
		if (project.hasProperty('imagePrefix')) {
			dockerImageName = "${imagePrefix}-" + applicationName.toLowerCase()
		}
		else {
			dockerImageName = applicationName.toLowerCase()
		}
		dockerBuildDir = new File(buildDir, 'docker').getAbsolutePath()
		dockerImageInputsChanged = false
	}
			
	task dockerCopyDependencies(type: Copy) {
		dependsOn 'installDist'
		
		from("$installDist.destinationDir/lib") {
			exclude jar.archiveName, '*SNAPSHOT*'
		}
		into "$dockerBuildDir/dependencies"
		
		doLast { dockerImageInputsChanged = true }
	}

	task dockerCopySnapshotDependencies(type: Copy) {
		dependsOn 'installDist'
		
		from("$installDist.destinationDir/lib") {
			exclude jar.archiveName
			include '*SNAPSHOT*'
		}
		into "$dockerBuildDir/snapshot-dependencies"
		
		doLast { dockerImageInputsChanged = true }
	}

	task dockerCopyDockerfile(type: Copy) {
		dependsOn 'installDist'
		
		from 'docker'
		into dockerBuildDir
		
		doLast { dockerImageInputsChanged = true }
	}

	task dockerCopyBin(type: Copy) {
		dependsOn 'installDist'
		
		from ("$installDist.destinationDir/bin") {
			exclude '*.bat'
		}
		into "$dockerBuildDir/bin"
		
		doLast { dockerImageInputsChanged = true }
	}

	task dockerCopyApplication(type: Copy) {
		dependsOn 'installDist'
		
		from("$installDist.destinationDir/lib") {
			include jar.archiveName
		}
		into "$dockerBuildDir/application"
		
		doLast { dockerImageInputsChanged = true }
	}

	task dockerBackendImage(type: Exec) {
		group 'docker'
		description 'Builds docker image based on the installation'

		dependsOn 'installDist'
		dependsOn 'dockerCopyDependencies'
		dependsOn 'dockerCopySnapshotDependencies'
		dependsOn 'dockerCopyDockerfile'
		dependsOn 'dockerCopyBin'
		dependsOn 'dockerCopyApplication'
		
		doFirst {
			logger.quiet "Building docker image: ${dockerImageName}"			
		}
		workingDir dockerBuildDir
		commandLine 'docker', 'build', '-t', "${dockerImageName}", '.'
		
		outputs.upToDateWhen { !dockerImageInputsChanged }
	}
}
else {
	task dockerBuildBackend() {
	}
}


/********************************************************************************************************
 * Placeholder task
 *******************************************************************************************************/
task dockerImage() {
    group 'docker'
	description 'Builds docker image.'
}
